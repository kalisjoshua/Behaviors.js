{"name":"Behaviors.JS","tagline":"Progressive enhancement JavaScript libraries configured via HTML","body":"These libraries have no dependencies, so you simply need to reference one to use it. Since they follow the principle of progressive enhancement they should fall back to vanilla HTML behavior on older browsers.\r\n\r\nMinimum system requirements: IE9+.\r\n\r\nsplice-into\r\n-----------\r\n\r\nAllows you to submit forms via AJAX and then inserts new information into the current page. Since this library uses CSS selector to target elements, it can operate on several targets at once.\r\n\r\nTo use it, add `splice-into=\"cssSelector\"` to any HTML form. The CSS selector should target one or more elements on the current page. Those elements need to have IDs and will only be changed if the target page also has an element with matching ID.\r\n\r\n    <form action=\"/whatever/page\" splice-into=\"#placeholder\">\r\n    <!-- ... -->\r\n    </form>\r\n    \r\n    <div id=\"placeholder\">\r\n    <!-- this will be updated when you submit the form -->\r\n    </div>\r\n\r\nNote: If you add `splice-into-ignore` attribute to a button, submitting via that button will trigger a normal request instead of AJAX.\r\n\r\nDemos:\r\n* Simplest example, [single tag substitution](./demos/splice-into/demo-1/index.html).\r\n* [Replacing submitted form](./demos/splice-into/demo-2/index.html).\r\n* [Replacing multiple targets](./demos/splice-into/demo-3/index.html) and doing some animation.\r\n* [\"Recursive\" substitution](./demos/splice-into/demo-4/index.html).\r\n\r\ncharacters-left\r\n---------------\r\n\r\nIndicates to the user how many character they can type into a field before hitting `maxlength` or `data-val-length-max`.\r\n\r\n    <input type=\"text\" id=\"fieldId\" maxlength=\"10\" />\r\n    <characters-left in=\"fieldId\" />\r\n\r\nWhen the script runs, `characters-left` element is filled with the number of characters left until overflow. It also receives `overflow` attribute, which is set to `\"true\"` or `\"false\"`.\r\n\r\n[Demo](./demos/characters-left/index.html).\r\n\r\ninclude-on-proximity\r\n--------------------\r\n\r\nAllows you to easily implement infinite scrolling. Works by inlining links to the next page.\r\n\r\n    <div id=\"page\">\r\n        <!-- page content... -->\r\n        <a href=\"/page/2\" include-on-proximity>Next Page</a>\r\n    </div>\r\n\r\nThe script works by targeting the immediate parent element of the link and treating it as the container for appending data. In the above example the script will load `/page/2`, parse it, find an element with `id=\"page\"`, get its content and replace \"Next Page\" link with that content. \r\n\r\nTLDR: you need a parent tag with consistent ids across all pages.\r\n\r\nUsing the element with a value (`include-on-proximity=\"[pixels]\"`) will change the default proximity, i.e. how close you need to get to the link before it triggers an AJAX request.\r\n\r\n[Demo](./demos/include-on-proximity/page1.html).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}